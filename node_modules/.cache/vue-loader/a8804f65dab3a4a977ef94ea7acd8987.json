{"remainingRequest":"/Users/huoxiyi/IdeaProjects/MissuoFrontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/huoxiyi/IdeaProjects/MissuoFrontend/src/layout/components/components/password.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/huoxiyi/IdeaProjects/MissuoFrontend/src/layout/components/components/password.vue","mtime":1706568300178},{"path":"/Users/huoxiyi/IdeaProjects/MissuoFrontend/node_modules/cache-loader/dist/cjs.js","mtime":1706160675340},{"path":"/Users/huoxiyi/IdeaProjects/MissuoFrontend/node_modules/babel-loader/lib/index.js","mtime":1706160675266},{"path":"/Users/huoxiyi/IdeaProjects/MissuoFrontend/node_modules/ts-loader/index.js","mtime":1706160677894},{"path":"/Users/huoxiyi/IdeaProjects/MissuoFrontend/node_modules/cache-loader/dist/cjs.js","mtime":1706160675340},{"path":"/Users/huoxiyi/IdeaProjects/MissuoFrontend/node_modules/vue-loader/lib/index.js","mtime":1706160678107}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport { Component, Vue, Prop } from 'vue-property-decorator'\nimport { Form as ElForm, Input } from 'element-ui'\n// 接口\nimport { editPassword } from '@/api/users'\n@Component({\n  name: 'Password',\n})\nexport default class extends Vue {\n  @Prop() private dialogFormVisible!: any\n  private validatePwd = (rule: any, value: any, callback: Function) => {\n    const reg = /^[0-9A-Za-z]{6,20}$/\n    if (!value) {\n      callback(new Error('Please enter'))\n    } else if (!reg.test(value)) {\n      callback(new Error('6 - 20 digit password, numeric or alphabetic, case sensitive'))\n    } else {\n      callback()\n    }\n  }\n  private validatePass2 = (rule, value, callback) => {\n    if (!value) {\n      callback(new Error('Please enter your password again'))\n    } else if (value !== this.form.newPassword) {\n      callback(new Error('Password is not the same, please re-enter the password'))\n    } else {\n      callback()\n    }\n  }\n  rules = {\n    oldPassword: [{ validator: this.validatePwd, trigger: 'blur' }],\n    newPassword: [{ validator: this.validatePwd, trigger: 'blur' }],\n    affirmPassword: [{ validator: this.validatePass2, trigger: 'blur' }],\n  }\n  private form = {} as any\n  private affirmPassword = ''\n  handleSave() {\n    ;(this.$refs.form as ElForm).validate(async (valid: boolean) => {\n      if (valid) {\n        const parnt = {\n          oldPassword: this.form.oldPassword,\n          newPassword: this.form.newPassword,\n        }\n        await editPassword(parnt)\n        this.$emit('handleclose')\n        ;(this.$refs.form as ElForm).resetFields()\n      } else {\n        return false\n      }\n    })\n  }\n  handlePwdClose() {\n    ;(this.$refs.form as ElForm).resetFields()\n    this.$emit('handleclose')\n  }\n}\n",{"version":3,"sources":["password.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"password.vue","sourceRoot":"src/layout/components/components","sourcesContent":["<template>\n  <el-dialog\n    title=\"Update Password\"\n    :visible.sync=\"dialogFormVisible\"\n    width=\"568px\"\n    class=\"pwdCon\"\n    @close=\"handlePwdClose()\"\n  >\n    <el-form :model=\"form\" label-width=\"85px\" :rules=\"rules\" ref=\"form\">\n      <el-form-item label=\"Original:\" prop=\"oldPassword\">\n        <el-input\n          v-model=\"form.oldPassword\"\n          type=\"password\"\n          placeholder=\"Please enter\"\n        ></el-input>\n      </el-form-item>\n      <el-form-item label=\"New:\" prop=\"newPassword\">\n        <el-input\n          v-model=\"form.newPassword\"\n          type=\"password\"\n          placeholder=\"6 - 20 digit password, numeric or alphabetic, case sensitive\"\n        ></el-input>\n      </el-form-item>\n      <el-form-item label=\"Confirm:\" prop=\"affirmPassword\">\n        <el-input\n          v-model=\"form.affirmPassword\"\n          type=\"password\"\n          placeholder=\"Please enter\"\n        ></el-input>\n      </el-form-item>\n    </el-form>\n    <div slot=\"footer\" class=\"dialog-footer\">\n      <el-button @click=\"handlePwdClose()\">Cancel</el-button>\n      <el-button type=\"primary\" @click=\"handleSave()\">Submit</el-button>\n    </div>\n  </el-dialog>\n</template>\n<script lang=\"ts\">\nimport { Component, Vue, Prop } from 'vue-property-decorator'\nimport { Form as ElForm, Input } from 'element-ui'\n// 接口\nimport { editPassword } from '@/api/users'\n@Component({\n  name: 'Password',\n})\nexport default class extends Vue {\n  @Prop() private dialogFormVisible!: any\n  private validatePwd = (rule: any, value: any, callback: Function) => {\n    const reg = /^[0-9A-Za-z]{6,20}$/\n    if (!value) {\n      callback(new Error('Please enter'))\n    } else if (!reg.test(value)) {\n      callback(new Error('6 - 20 digit password, numeric or alphabetic, case sensitive'))\n    } else {\n      callback()\n    }\n  }\n  private validatePass2 = (rule, value, callback) => {\n    if (!value) {\n      callback(new Error('Please enter your password again'))\n    } else if (value !== this.form.newPassword) {\n      callback(new Error('Password is not the same, please re-enter the password'))\n    } else {\n      callback()\n    }\n  }\n  rules = {\n    oldPassword: [{ validator: this.validatePwd, trigger: 'blur' }],\n    newPassword: [{ validator: this.validatePwd, trigger: 'blur' }],\n    affirmPassword: [{ validator: this.validatePass2, trigger: 'blur' }],\n  }\n  private form = {} as any\n  private affirmPassword = ''\n  handleSave() {\n    ;(this.$refs.form as ElForm).validate(async (valid: boolean) => {\n      if (valid) {\n        const parnt = {\n          oldPassword: this.form.oldPassword,\n          newPassword: this.form.newPassword,\n        }\n        await editPassword(parnt)\n        this.$emit('handleclose')\n        ;(this.$refs.form as ElForm).resetFields()\n      } else {\n        return false\n      }\n    })\n  }\n  handlePwdClose() {\n    ;(this.$refs.form as ElForm).resetFields()\n    this.$emit('handleclose')\n  }\n}\n</script>\n<style lang=\"scss\">\n.navbar {\n  .pwdCon {\n    .el-dialog__body {\n      padding-top: 60px;\n      padding: 60px 100px 0;\n    }\n    .el-input__inner {\n      padding: 0 12px;\n    }\n    .el-form-item {\n      margin-bottom: 26px;\n    }\n    .el-form-item__label {\n      text-align: left;\n    }\n    .el-dialog__footer {\n      padding-top: 14px;\n    }\n  }\n}\n</style>\n"]}]}