{"remainingRequest":"/Users/huoxiyi/IdeaProjects/MissuoFrontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/huoxiyi/IdeaProjects/MissuoFrontend/src/views/setmeal/components/AddDish.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/huoxiyi/IdeaProjects/MissuoFrontend/src/views/setmeal/components/AddDish.vue","mtime":1706571706970},{"path":"/Users/huoxiyi/IdeaProjects/MissuoFrontend/node_modules/cache-loader/dist/cjs.js","mtime":1706160675340},{"path":"/Users/huoxiyi/IdeaProjects/MissuoFrontend/node_modules/babel-loader/lib/index.js","mtime":1706160675266},{"path":"/Users/huoxiyi/IdeaProjects/MissuoFrontend/node_modules/ts-loader/index.js","mtime":1706160677894},{"path":"/Users/huoxiyi/IdeaProjects/MissuoFrontend/node_modules/cache-loader/dist/cjs.js","mtime":1706160675340},{"path":"/Users/huoxiyi/IdeaProjects/MissuoFrontend/node_modules/vue-loader/lib/index.js","mtime":1706160678107}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport { Component, Prop, Vue, Watch } from 'vue-property-decorator'\n// import {getDishTypeList, getDishListType} from '@/api/dish';\nimport { getCategoryList, queryDishList } from '@/api/dish'\nimport Empty from '@/components/Empty/index.vue'\n\n@Component({\n  name: 'selectInput',\n  components: {\n    Empty\n  }\n})\nexport default class extends Vue {\n  @Prop({ default: '' }) private value!: number\n  @Prop({ default: [] }) private checkList!: any[]\n  @Prop({ default: '' }) private seachKey!: string\n  private dishType: [] = []\n  private dishList: [] = []\n  private allDishList: any[] = []\n  private dishListCache: any[] = []\n  private keyInd = 0\n  private searchValue: string = ''\n  public checkedList: any[] = []\n  private checkedListAll: any[] = []\n  private ids: any = new Set()\n  created() {\n    this.init()\n  }\n\n  @Watch('seachKey')\n  private seachKeyChange(value: any) {\n    if (value.trim()) {\n      this.getDishForName(this.seachKey)\n    }\n  }\n\n  public init() {\n    // 菜单列表数据获取\n    this.getDishType()\n    // 初始化选项\n    this.checkedList = this.checkList.map((it: any) => it.name)\n    // 已选项的菜品-详细信息\n    this.checkedListAll = this.checkList.reverse()\n  }\n  // 获取套餐分类\n  public getDishType() {\n    getCategoryList({ type: 1 }).then(res => {\n      if (res && res.data && res.data.code === 200) {\n        this.dishType = res.data.data\n        this.getDishList(res.data.data[0].id)\n      } else {\n        this.$message.error(res.data.msg)\n      }\n      // if (res.data.code == 200) {\n      //   const { data } = res.data\n      //   this.   = data\n      //   this.getDishList(data[0].category_id)\n      // } else {\n      //   this.$message.error(res.data.desc)\n      // }\n    })\n  }\n\n  // 通过套餐ID获取菜品列表分类\n  private getDishList(id: number) {\n    queryDishList({ categoryId: id }).then(res => {\n      if (res && res.data && res.data.code === 200) {\n        if (res.data.data.length == 0) {\n          this.dishList = []\n          return\n        }\n        let newArr = res.data.data\n        newArr.forEach((n: any) => {\n          n.dishId = n.id\n          n.copies = 1\n          // n.dishCopies = 1\n          n.dishName = n.name\n        })\n        this.dishList = newArr\n        if (!this.ids.has(id)) {\n          this.allDishList = [...this.allDishList, ...newArr]\n        }\n        this.ids.add(id)\n      } else {\n        this.$message.error(res.data.msg)\n      }\n    })\n  }\n\n  // 关键词收搜菜品列表分类\n  private getDishForName(name: any) {\n    queryDishList({ name }).then(res => {\n      if (res && res.data && res.data.code === 200) {\n        let newArr = res.data.data\n        newArr.forEach((n: any) => {\n          n.dishId = n.id\n          n.dishName = n.name\n        })\n        this.dishList = newArr\n      } else {\n        this.$message.error(res.data.msg)\n      }\n    })\n  }\n  // 点击分类\n  private checkTypeHandle(ind: number, id: any) {\n    this.keyInd = ind\n    this.getDishList(id)\n  }\n  // 添加菜品\n  private checkedListHandle(value: [string]) {\n    // TODO 实现倒序 由于value是组件内封装无法从前面添加 所有取巧处理倒序添加\n    // 倒序展示 - 数据处理前反正 为正序\n    this.checkedListAll.reverse()\n    // value 是一个只包含菜品名的数组 需要从 dishList中筛选出 对应的详情\n    // 操作添加菜品\n    const list = this.allDishList.filter((item: any) => {\n      let data\n      value.forEach((it: any) => {\n        if (item.name == it) {\n          data = item\n        }\n      })\n      return data\n    })\n    // 编辑的时候需要与已有菜品合并\n    // 与当前请求下的选择性 然后去重就是当前的列表\n    const dishListCat = [...this.checkedListAll, ...list]\n    let arrData: any[] = []\n    this.checkedListAll = dishListCat.filter((item: any) => {\n      let allArrDate\n      if (arrData.length == 0) {\n        arrData.push(item.name)\n        allArrDate = item\n      } else {\n        const st = arrData.some(it => item.name == it)\n        if (!st) {\n          arrData.push(item.name)\n          allArrDate = item\n        }\n      }\n      return allArrDate\n    })\n    // 如果是减菜 走这里\n    if (value.length < arrData.length) {\n      this.checkedListAll = this.checkedListAll.filter((item: any) => {\n        if (value.some(it => it == item.name)) {\n          return item\n        }\n      })\n    }\n    this.$emit('checkList', this.checkedListAll)\n    // 数据处理完反转为倒序\n    this.checkedListAll.reverse()\n  }\n\n  open(done: any) {\n    this.dishListCache = JSON.parse(JSON.stringify(this.checkList))\n  }\n\n  close(done: any) {\n    this.checkList = this.dishListCache\n  }\n\n  // 删除\n  private delCheck(name: any) {\n    const index = this.checkedList.findIndex(it => it === name)\n    const indexAll = this.checkedListAll.findIndex(\n      (it: any) => it.name === name\n    )\n\n    this.checkedList.splice(index, 1)\n    this.checkedListAll.splice(indexAll, 1)\n    this.$emit('checkList', this.checkedListAll)\n  }\n}\n",{"version":3,"sources":["AddDish.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"AddDish.vue","sourceRoot":"src/views/setmeal/components","sourcesContent":["<template>\n  <div class=\"addDish\">\n    <div class=\"leftCont\">\n      <div v-show=\"seachKey.trim() == ''\"\n           class=\"tabBut\">\n        <span v-for=\"(item, index) in dishType\"\n              :key=\"index\"\n              :class=\"{ act: index == keyInd }\"\n              @click=\"checkTypeHandle(index, item.id)\">{{ item.name }}</span>\n      </div>\n      <div class=\"tabList\">\n        <div class=\"table\"\n             :class=\"{ borderNone: !dishList.length }\">\n          <div v-if=\"dishList.length == 0\"\n               style=\"padding-left: 10px\">\n            <Empty />\n          </div>\n          <el-checkbox-group v-if=\"dishList.length > 0\"\n                             v-model=\"checkedList\"\n                             @change=\"checkedListHandle\">\n            <div v-for=\"(item, index) in dishList\"\n                 :key=\"item.name + item.id\"\n                 class=\"items\">\n              <el-checkbox :key=\"index\"\n                           :label=\"item.name\">\n                <div class=\"item\">\n                  <span style=\"flex: 3; text-align: left\">{{\n                    item.dishName\n                  }}</span>\n                  <span>{{ item.status == 0 ? 'Disabled' : 'Enabled' }}</span>\n                  <span>{{ (Number(item.price) ).toFixed(2)*100/100 }}</span>\n                </div>\n              </el-checkbox>\n            </div>\n          </el-checkbox-group>\n        </div>\n      </div>\n    </div>\n    <div class=\"ritCont\">\n      <div class=\"tit\">\n        Selected dishes({{ checkedListAll.length }})\n      </div>\n      <div class=\"items\">\n        <div v-for=\"(item, ind) in checkedListAll\"\n             :key=\"ind\"\n             class=\"item\">\n          <span>{{ item.dishName || item.name }}</span>\n          <span class=\"price\">￥ {{ (Number(item.price) ).toFixed(2)*100/100 }} </span>\n          <span class=\"del\"\n                @click=\"delCheck(item.name)\">\n            <img src=\"./../../../assets/icons/btn_clean@2x.png\"\n                 alt=\"\">\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Prop, Vue, Watch } from 'vue-property-decorator'\n// import {getDishTypeList, getDishListType} from '@/api/dish';\nimport { getCategoryList, queryDishList } from '@/api/dish'\nimport Empty from '@/components/Empty/index.vue'\n\n@Component({\n  name: 'selectInput',\n  components: {\n    Empty\n  }\n})\nexport default class extends Vue {\n  @Prop({ default: '' }) private value!: number\n  @Prop({ default: [] }) private checkList!: any[]\n  @Prop({ default: '' }) private seachKey!: string\n  private dishType: [] = []\n  private dishList: [] = []\n  private allDishList: any[] = []\n  private dishListCache: any[] = []\n  private keyInd = 0\n  private searchValue: string = ''\n  public checkedList: any[] = []\n  private checkedListAll: any[] = []\n  private ids: any = new Set()\n  created() {\n    this.init()\n  }\n\n  @Watch('seachKey')\n  private seachKeyChange(value: any) {\n    if (value.trim()) {\n      this.getDishForName(this.seachKey)\n    }\n  }\n\n  public init() {\n    // 菜单列表数据获取\n    this.getDishType()\n    // 初始化选项\n    this.checkedList = this.checkList.map((it: any) => it.name)\n    // 已选项的菜品-详细信息\n    this.checkedListAll = this.checkList.reverse()\n  }\n  // 获取套餐分类\n  public getDishType() {\n    getCategoryList({ type: 1 }).then(res => {\n      if (res && res.data && res.data.code === 200) {\n        this.dishType = res.data.data\n        this.getDishList(res.data.data[0].id)\n      } else {\n        this.$message.error(res.data.msg)\n      }\n      // if (res.data.code == 200) {\n      //   const { data } = res.data\n      //   this.   = data\n      //   this.getDishList(data[0].category_id)\n      // } else {\n      //   this.$message.error(res.data.desc)\n      // }\n    })\n  }\n\n  // 通过套餐ID获取菜品列表分类\n  private getDishList(id: number) {\n    queryDishList({ categoryId: id }).then(res => {\n      if (res && res.data && res.data.code === 200) {\n        if (res.data.data.length == 0) {\n          this.dishList = []\n          return\n        }\n        let newArr = res.data.data\n        newArr.forEach((n: any) => {\n          n.dishId = n.id\n          n.copies = 1\n          // n.dishCopies = 1\n          n.dishName = n.name\n        })\n        this.dishList = newArr\n        if (!this.ids.has(id)) {\n          this.allDishList = [...this.allDishList, ...newArr]\n        }\n        this.ids.add(id)\n      } else {\n        this.$message.error(res.data.msg)\n      }\n    })\n  }\n\n  // 关键词收搜菜品列表分类\n  private getDishForName(name: any) {\n    queryDishList({ name }).then(res => {\n      if (res && res.data && res.data.code === 200) {\n        let newArr = res.data.data\n        newArr.forEach((n: any) => {\n          n.dishId = n.id\n          n.dishName = n.name\n        })\n        this.dishList = newArr\n      } else {\n        this.$message.error(res.data.msg)\n      }\n    })\n  }\n  // 点击分类\n  private checkTypeHandle(ind: number, id: any) {\n    this.keyInd = ind\n    this.getDishList(id)\n  }\n  // 添加菜品\n  private checkedListHandle(value: [string]) {\n    // TODO 实现倒序 由于value是组件内封装无法从前面添加 所有取巧处理倒序添加\n    // 倒序展示 - 数据处理前反正 为正序\n    this.checkedListAll.reverse()\n    // value 是一个只包含菜品名的数组 需要从 dishList中筛选出 对应的详情\n    // 操作添加菜品\n    const list = this.allDishList.filter((item: any) => {\n      let data\n      value.forEach((it: any) => {\n        if (item.name == it) {\n          data = item\n        }\n      })\n      return data\n    })\n    // 编辑的时候需要与已有菜品合并\n    // 与当前请求下的选择性 然后去重就是当前的列表\n    const dishListCat = [...this.checkedListAll, ...list]\n    let arrData: any[] = []\n    this.checkedListAll = dishListCat.filter((item: any) => {\n      let allArrDate\n      if (arrData.length == 0) {\n        arrData.push(item.name)\n        allArrDate = item\n      } else {\n        const st = arrData.some(it => item.name == it)\n        if (!st) {\n          arrData.push(item.name)\n          allArrDate = item\n        }\n      }\n      return allArrDate\n    })\n    // 如果是减菜 走这里\n    if (value.length < arrData.length) {\n      this.checkedListAll = this.checkedListAll.filter((item: any) => {\n        if (value.some(it => it == item.name)) {\n          return item\n        }\n      })\n    }\n    this.$emit('checkList', this.checkedListAll)\n    // 数据处理完反转为倒序\n    this.checkedListAll.reverse()\n  }\n\n  open(done: any) {\n    this.dishListCache = JSON.parse(JSON.stringify(this.checkList))\n  }\n\n  close(done: any) {\n    this.checkList = this.dishListCache\n  }\n\n  // 删除\n  private delCheck(name: any) {\n    const index = this.checkedList.findIndex(it => it === name)\n    const indexAll = this.checkedListAll.findIndex(\n      (it: any) => it.name === name\n    )\n\n    this.checkedList.splice(index, 1)\n    this.checkedListAll.splice(indexAll, 1)\n    this.$emit('checkList', this.checkedListAll)\n  }\n}\n</script>\n<style lang=\"scss\">\n.addDish {\n  .el-checkbox__label {\n    width: 100%;\n  }\n  .empty-box {\n    margin-top: 50px;\n    margin-bottom: 0px;\n  }\n}\n</style>\n<style lang=\"scss\" scoped>\n.addDish {\n  padding: 0 20px;\n  display: flex;\n  line-height: 40px;\n  .empty-box {\n    img {\n      width: 190px;\n      height: 147px;\n    }\n  }\n\n  .borderNone {\n    border: none !important;\n  }\n  span,\n  .tit {\n    color: #333;\n  }\n  .leftCont {\n    display: flex;\n    border-right: solid 1px #efefef;\n    width: 60%;\n    padding: 15px;\n    .tabBut {\n      width: 110px;\n      font-weight: bold;\n      border-right: solid 2px #f4f4f4;\n      span {\n        display: block;\n        text-align: center;\n        // border-right: solid 2px #f4f4f4;\n        cursor: pointer;\n        position: relative;\n      }\n    }\n    .act {\n      border-color: $mine !important;\n      color: $mine !important;\n    }\n    .act::after {\n      content: ' ';\n      display: inline-block;\n      background-color: $mine;\n      width: 2px;\n      height: 40px;\n      position: absolute;\n      right: -2px;\n    }\n    .tabList {\n      flex: 1;\n      padding: 15px;\n      height: 400px;\n      overflow-y: scroll;\n      .table {\n        border: solid 1px #f4f4f4;\n        border-bottom: solid 1px #f4f4f4;\n        .items {\n          border-bottom: solid 1px #f4f4f4;\n          padding: 0 10px;\n          display: flex;\n          .el-checkbox,\n          .el-checkbox__label {\n            width: 100%;\n          }\n          .item {\n            display: flex;\n            padding-right: 20px;\n            span {\n              display: inline-block;\n              text-align: center;\n              flex: 1;\n              font-weight: normal;\n            }\n          }\n        }\n      }\n    }\n  }\n  .ritCont {\n    width: 40%;\n    .tit {\n      margin: 0 15px;\n      font-weight: bold;\n    }\n    .items {\n      height: 338px;\n      padding: 4px 15px;\n      overflow: scroll;\n    }\n    .item {\n      box-shadow: 0px 1px 4px 3px rgba(0, 0, 0, 0.03);\n      display: flex;\n      text-align: center;\n      padding: 0 10px;\n      margin-bottom: 20px;\n      border-radius: 6px;\n      color: #818693;\n      span:first-child {\n        text-align: left;\n        color: #20232a;\n        flex: 70%;\n      }\n      .price {\n        display: inline-block;\n        flex: 70%;\n        text-align: left;\n      }\n      .del {\n        cursor: pointer;\n        img {\n          position: relative;\n          top: 5px;\n          width: 20px;\n        }\n      }\n    }\n  }\n}\n</style>\n"]}]}